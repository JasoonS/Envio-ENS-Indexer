type ENSRegistryEventsSummary {
    id: ID!
    approvalForAll: [ApprovalForAll!]! @derivedFrom(field: "eventsSummary")
    approvalForAllsCount: BigInt!
    newOwner: [NewOwner!]! @derivedFrom(field: "eventsSummary")
    newOwnersCount: BigInt!
    newResolver: [NewResolver!]! @derivedFrom(field: "eventsSummary")
    newResolversCount: BigInt!
    newTTL: [NewTTL!]! @derivedFrom(field: "eventsSummary")
    newTTLsCount: BigInt!
    transfer: [Transfer!]! @derivedFrom(field: "eventsSummary")
    transfersCount: BigInt!
}

type ApprovalForAll {
    id: ID!
    owner: String!
    operator: String!
    approved: Boolean!
    eventsSummary: String!
}

type NewOwner {
    id: ID!
    node: String!
    label: String!
    owner: String!
    eventsSummary: String!
}

type NewResolver {
    id: ID!
    node: String!
    resolver: String!
    eventsSummary: String!
}

type NewTTL {
    id: ID!
    node: String!
    ttl: BigInt!
    eventsSummary: String!
}

type Transfer {
    id: ID!
    node: String!
    owner: String!
    eventsSummary: String!
}


type EthRegistrarControllerEventSummary {
    id: ID!
    nameRegistered: [NameRegistered!]! @derivedFrom(field: "eventsSummary")
    nameRegisteredsCount: BigInt!
    nameRenewed: [NameRenewed!]! @derivedFrom(field: "eventsSummary")
    nameRenewedsCount: BigInt!
    baseRegistrar_NameRegistered: [BaseRegistrar_NameRegistered!]! @derivedFrom(field: "eventsSummary")
    baseRegistrar_NameRegisteredCount: BigInt!
    baseRegistrar_NameRenewed: [BaseRegistrar_NameRenewed!]! @derivedFrom(field: "eventsSummary")
    baseRegistrar_NameRenewedCount: BigInt!
    baseRegistrar_Transfer: [BaseRegistrar_Transfer!]! @derivedFrom(field: "eventsSummary")
    baseRegistrar_TransferCount: BigInt!
    ethRegistrarControllerOld_NameRegistered: [EthRegistrarControllerOld_NameRegistered!]! @derivedFrom(field: "eventsSummary")
    ethRegistrarControllerOld_NameRegisteredCount: BigInt!
    ethRegistrarControllerOld_NameRenewed: [EthRegistrarControllerOld_NameRenewed!]! @derivedFrom(field: "eventsSummary")
    ethRegistrarControllerOld_NameRenewedCount: BigInt!
}

type NameRegistered {
    id: ID!
    name: String!
    label: String!
    owner: String!
    baseCost: BigInt!
    premium: BigInt!
    expires: BigInt!
    eventsSummary: String!
}

type NameRenewed {
    id: ID!
    name: String!
    label: String!
    cost: BigInt!
    expires: BigInt!
    eventsSummary: String!
}

type BaseRegistrar_NameRegistered {
    id: ID!
    eventId: BigInt!
    owner: String!
    expires: BigInt!
    eventsSummary: String!
}
type BaseRegistrar_NameRenewed {
    id: ID!
    eventId: BigInt!
    expires: BigInt!
    eventsSummary: String!
}
type BaseRegistrar_Transfer {
    id: ID!
    from: String!
    to: String!
    tokenId: BigInt!
    eventsSummary: String!
}

type EthRegistrarControllerOld_NameRegistered {
    id: ID!
    name: String!
    label: String!
    owner: String!
    cost: BigInt!
    expires: BigInt!
    eventsSummary: String!
}
type EthRegistrarControllerOld_NameRenewed {
    id: ID!
    name: String!
    label: String!
    cost: BigInt!
    expires: BigInt!
    eventsSummary: String!
}

type OwnershipTransferred {
    id: ID!
    previousOwner: String!
    newOwner: String!
    eventsSummary: String!
}

type NameWrapperEventsSummary {
    id: ID!
    approval: [Approval!]! @derivedFrom(field: "eventsSummary")
    approvalsCount: BigInt!
    approvalForAll: [NWApprovalForAll!]! @derivedFrom(field: "eventsSummary")
    approvalForAllsCount: BigInt!
    controllerChanged: [ControllerChanged!]! @derivedFrom(field: "eventsSummary")
    controllerChangedsCount: BigInt!
    expiryExtended: [ExpiryExtended!]! @derivedFrom(field: "eventsSummary")
    expiryExtendedsCount: BigInt!
    fusesSet: [FusesSet!]! @derivedFrom(field: "eventsSummary")
    fusesSetsCount: BigInt!
    nameUnwrapped: [NameUnwrapped!]! @derivedFrom(field: "eventsSummary")
    nameUnwrappedsCount: BigInt!
    nameWrapped: [NameWrapped!]! @derivedFrom(field: "eventsSummary")
    nameWrappedsCount: BigInt!
    ownershipTransferred: [OwnershipTransferred!]! @derivedFrom(field: "eventsSummary")
    ownershipTransferredsCount: BigInt!
    transferBatch: [TransferBatch!]! @derivedFrom(field: "eventsSummary")
    transferBatchsCount: BigInt!
    transferSingle: [TransferSingle!]! @derivedFrom(field: "eventsSummary")
    transferSinglesCount: BigInt!
}

type Approval {
    id: ID!
    owner: String!
    approved: String!
    tokenId: BigInt!
    eventsSummary: String!
}

type NWApprovalForAll {
    id: ID!
    account: String!
    operator: String!
    approved: Boolean!
    eventsSummary: String!
}

type ControllerChanged {
    id: ID!
    controller: String!
    active: Boolean!
    eventsSummary: String!
}

type ExpiryExtended {
    id: ID!
    node: String!
    expiry: BigInt!
    eventsSummary: String!
}

type FusesSet {
    id: ID!
    node: String!
    fuses: BigInt!
    eventsSummary: String!
}

type NameUnwrapped {
    id: ID!
    node: String!
    owner: String!
    eventsSummary: String!
}

type NameWrapped {
    id: ID!
    node: String!
    name: String!
    owner: String!
    fuses: BigInt!
    expiry: BigInt!
    eventsSummary: String!
}

type TransferBatch {
    id: ID!
    operator: String!
    from: String!
    to: String!
    ids: [BigInt!]!
    values: [BigInt!]!
    eventsSummary: String!
}

type TransferSingle {
    id: ID!
    operator: String!
    from: String!
    to: String!
    eventId: BigInt!
    value: BigInt!
    eventsSummary: String!
}

type ResolverEventsSummary {
    id: ID!
    resolver_ABIChanged: [Resolver_ABIChanged!]! @derivedFrom(field: "eventsSummary")
    resolver_ABIChangedCount: BigInt!
    resolver_AddrChanged: [Resolver_AddrChanged!]! @derivedFrom(field: "eventsSummary")
    resolver_AddrChangedCount: BigInt!
    resolver_AddressChanged: [Resolver_AddressChanged!]! @derivedFrom(field: "eventsSummary")
    resolver_AddressChangedCount: BigInt!
    resolver_AuthorisationChanged: [Resolver_AuthorisationChanged!]! @derivedFrom(field: "eventsSummary")
    resolver_AuthorisationChangedCount: BigInt!
    resolver_ContenthashChanged: [Resolver_ContenthashChanged!]! @derivedFrom(field: "eventsSummary")
    resolver_ContenthashChangedCount: BigInt!
    resolver_InterfaceChanged: [Resolver_InterfaceChanged!]! @derivedFrom(field: "eventsSummary")
    resolver_InterfaceChangedCount: BigInt!
    resolver_NameChanged: [Resolver_NameChanged!]! @derivedFrom(field: "eventsSummary")
    resolver_NameChangedCount: BigInt!
    resolver_PubkeyChanged: [Resolver_PubkeyChanged!]! @derivedFrom(field: "eventsSummary")
    resolver_PubkeyChangedCount: BigInt!
    resolver_TextChanged: [Resolver_TextChanged!]! @derivedFrom(field: "eventsSummary")
    resolver_TextChangedCount: BigInt!
    resolver_VersionChanged: [Resolver_VersionChanged!]! @derivedFrom(field: "eventsSummary")
    resolver_VersionChangedCount: BigInt!
}

type Resolver_ABIChanged {
    id: ID!
    node: String!
    contentType: BigInt!
    eventsSummary: String!
}
type Resolver_AddrChanged {
    id: ID!
    node: String!
    a: String!
    eventsSummary: String!
}
type Resolver_AddressChanged {
    id: ID!
    node: String!
    coinType: BigInt!
    newAddress: String!
    eventsSummary: String!
}
type Resolver_AuthorisationChanged {
    id: ID!
    node: String!
    owner: String!
    target: String!
    isAuthorised: Boolean!
    eventsSummary: String!
}
type Resolver_ContenthashChanged {
    id: ID!
    node: String!
    hash: String!
    eventsSummary: String!
}
type Resolver_InterfaceChanged {
    id: ID!
    node: String!
    interfaceID: String!
    implementer: String!
    eventsSummary: String!
}
type Resolver_NameChanged {
    id: ID!
    node: String!
    name: String!
    eventsSummary: String!
}
type Resolver_PubkeyChanged {
    id: ID!
    node: String!
    x: String!
    y: String!
    eventsSummary: String!
}
type Resolver_TextChanged {
    id: ID!
    node: String!
    indexedKey: String!
    key: String!
    eventsSummary: String!
}
type Resolver_VersionChanged {
    id: ID!
    node: String!
    newVersion: BigInt!
    eventsSummary: String!
}


type Account {
    "The unique identifier for the account"
    id: ID!
    "The domains owned by the account"
    domains: [Domain!]! @derivedFrom(field: "owner")
    "The WrappedDomains owned by the account"
    wrappedDomains: [WrappedDomain!]! @derivedFrom(field: "owner")
    "The Registrations made by the account"
    registrations: [Registration!]! @derivedFrom(field: "registrant")
}

type WrappedDomain {
    "unique identifier for each instance of the WrappedDomain entity"
    id: ID!
    "The domain that is wrapped by this WrappedDomain"
    domain: Domain!
    "The expiry date of the wrapped domain"
    expiryDate: BigInt!
    "The number of fuses remaining on the wrapped domain"
    fuses: BigInt!
    "The account that owns this WrappedDomain"
    owner: Account!
    "The name of the wrapped domain"
    name: String
}

type Registration  {
    "The unique identifier of the registration"
    id: ID!
    "The domain name associated with the registration"
    domain: Domain!
    "The registration date of the domain"
    registrationDate: BigInt!
    "The expiry date of the domain"
    expiryDate: BigInt!
    "The cost associated with the domain registration"
    cost: BigInt
    "The account that registered the domain"
    registrant: Account!
}


type Resolver  {
    "The unique identifier for this resolver, which is a concatenation of the resolver address and the domain namehash"
    id: ID!
    "The domain that this resolver is associated with"
    domain: Domain
    "The address of the resolver contract"
    address: String!
    "The current value of the 'addr' record for this resolver, as determined by the associated events"
    addr: Account
    "The content hash for this resolver, in binary format"
    contentHash: String
    "The set of observed text record keys for this resolver"
    texts: [String!]
    "The set of observed SLIP-44 coin types for this resolver"
    coinTypes: [BigInt!]
    #    "The events associated with this resolver"
    #    events: [ResolverEvent!]! @derivedFrom(field: "resolver")
}

type Domain {
    "The namehash of the name"
    id: ID!
    "The human readable name, if known. Unknown portions replaced with hash in square brackets (eg, foo.[1234].eth)"
    name: String
    "The human readable label name (imported from CSV), if known"
    labelName: String
    "keccak256(labelName)"
    labelhash: String
    "The namehash (id) of the parent name"
    parent: Domain
    "Can count domains from length of array"
    subdomains: [Domain!]! @derivedFrom(field: "parent")
    "The number of subdomains"
    subdomainCount: Int!
    "Address logged from current resolver, if any"
    resolvedAddress: Account

    "The time-to-live (TTL) value of the domain's records"
    ttl: BigInt

    "Indicates whether the domain has been migrated to a new registrar"
    isMigrated: Boolean!
    "The time when the domain was created"
    createdAt: BigInt!

    "The account that owns the domain"
    owner: Account!
    "The account that owns the ERC721 NFT for the domain"
    registrant: Account
    "The account that owns the wrapped domain"
    wrappedOwner: Account

    "The expiry date for the domain, from either the registration, or the wrapped domain if PCC is burned"
    expiryDate: BigInt

    "The registration associated with the domain"
    registration: Registration # @derivedFrom(field: "domain")
    "The wrapped domain associated with the domain"
    wrappedDomain: WrappedDomain # @derivedFrom(field: "domain")

    baseCost: BigInt
    renewPremium: BigInt

    "The resolver that controls the domain's settings"
    resolver: Resolver

    #  "The events associated with the domain"
    #  events: [DomainEvent!]! @derivedFrom(field: "domain")
}


